# map(function, iterable) ‚Äî –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ —Ñ—É–Ω–∫—Ü–∏—é –∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å.
# –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –∫ –∫–∞–∂–¥–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç map
# –∏—Ç–µ—Ä–∞—Ç–æ—Ä.
texts = ["–ü—Ä–∏–≤–µ—Ç", "–ó–î–û–†–û–í–ê", "–ø—Ä–∏–≤–µ–¢—Å—Ç–≤—É—é"]
res = map(lambda x: x.lower(), texts)
print(*res)

# filter(function, iterable) ‚Äî –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ —Ñ—É–Ω–∫—Ü–∏—é –∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å. –ï—Å–ª–∏
# —Ñ—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å—Ç–∏–Ω—É, —ç–ª–µ–º–µ–Ω—Ç –æ—Å—Ç–∞—ë—Ç—Å—è –≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏. –ö–∞–∫ –∏ map
# –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç –∏—Ç–µ—Ä–∞—Ç–æ—Ä.

numbers = [42, -73, 1024]
res = tuple(filter(lambda x: x > 0, numbers))
print(res)

# zip(*iterables, strict=False) ‚Äî –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π –∏
# –∏—Ç–µ—Ä–∏—Ä—É–µ—Ç—Å—è –ø–æ –Ω–∏–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ.
# –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞—Ç—å –∫–ª—é—á–µ–≤–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç strict=True, –≤—ã–∑–æ–≤–µ—Ç –æ—à–∏–±–∫—É ValueError –≤ —Å–ª—É—á–∞–µ
# —Ä–∞–∑–Ω–æ–≥–æ —á–∏—Å–ª–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –∫–∞–∂–¥–æ–π –∏–∑ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π.

names = ["–ò–≤–∞–Ω", "–ù–∏–∫–æ–ª–∞–π", "–ü—ë—Ç—Ä"]
salaries = [125_000, 96_000, 109_000]
awards = [0.1, 0.25, 0.13, 0.99]
for name, salary, award in zip(names, salaries, awards):
    print(f'{name} –∑–∞—Ä–∞–±–æ—Ç–∞–ª {salary:.2f} –¥–µ–Ω–µ–≥ –∏ –ø—Ä–µ–º–∏—é {salary * award:.2f}')

# ‚óè –§—É–Ω–∫—Ü–∏—è max()
# max(iterable, *[, key, default]) –∏–ª–∏ max(arg1, arg2, *args[, key])
lst_1 = []
lst_2 = [42, 256, 73]
lst_3 = [("–ò–≤–∞–Ω", 125_000), ("–ù–∏–∫–æ–ª–∞–π", 96_000), ("–ü—ë—Ç—Ä", 109_000)]
print(max(lst_1, default='empty'))
print(max(*lst_2))
print(max(lst_3, key=lambda x: x[1]))
# –í –ø–µ—Ä–≤–æ–º —Å–ª—É—á–∞–µ –ø–µ—Ä–µ–¥–∞–Ω–∞ –ø—É—Å—Ç–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ —Ñ—É–Ω–∫—Ü–∏—è –≤–µ—Ä–Ω—É–ª–∞ —Å—Ç—Ä–æ–∫—É
# empty.
# –í–æ –≤—Ç–æ—Ä–æ–º ‚Äî —Ä–∞—Å–ø–∞–∫–æ–≤–∞–ª–∏ —Å–ø–∏—Å–æ–∫ –∏ –Ω–∞—à–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.
# –í —Ç—Ä–µ—Ç—å–µ–º –∏—â–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Å—Ä–µ–¥–∏ —Ç—Ä—ë—Ö –∫–æ—Ä—Ç–µ–∂–µ–π –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É —Å –∏–Ω–¥–µ–∫—Å–æ–º –æ–¥–∏–Ω,
# —Ç.–µ. –ø–æ —á–∏—Å–ª—É


# min(iterable, *[, key, default]) –∏–ª–∏ min(arg1, arg2, *args[, key])
# –§—É–Ω–∫—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ max, –Ω–æ –∏—â–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç.
lst_1 = []
lst_2 = [42, 256, 73]
lst_3 = [("–ò–≤–∞–Ω", 125_000), ("–ù–∏–∫–æ–ª–∞–π", 96_000), ("–ü—ë—Ç—Ä",
                                                  109_000)]
print(min(lst_1, default='empty'))
print(min(*lst_2))
print(min(lst_3, key=lambda x: x[1]))

# ‚óè –§—É–Ω–∫—Ü–∏—è sum()
# sum(iterable, /, start=0)
# –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–±—ä–µ–∫—Ç –∏—Ç–µ—Ä–∞—Ç–æ—Ä –∏ –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—É–º–º—É –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤.
# –ö–ª—é—á–µ–≤–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç start –∑–∞–¥–∞—ë—Ç –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏—è.
my_list = [42, 256, 73]
print(sum(my_list))
print(sum(my_list, start=1024))

# –§—É–Ω–∫—Ü–∏—è all –æ–±—ã—á–Ω–æ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∫–∞–∫–∏—Ö-—Ç–æ –≤—ã—á–∏—Å–ª–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ
# –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∏—Å—Ç–∏–Ω–Ω—ã–º–∏ –∏–ª–∏ –ª–æ–∂–Ω—ã–º–∏.
numbers = [42, -73, 1024]
if all(map(lambda x: x > 0, numbers)):
    print('–í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ')
else:
    print('–í –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –µ—Å—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∏/–∏–ª–∏ –Ω—É–ª–µ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã')

# ‚óè –§—É–Ω–∫—Ü–∏—è chr()
# chr(integer)
# –§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫–æ–≤–æ–π —Å–∏–º–≤–æ–ª –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –Æ–Ω–∏–∫–æ–¥ –ø–æ –µ–≥–æ –Ω–æ–º–µ—Ä—É. –ù–æ–º–µ—Ä -
# —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 1_114_111.

print(chr(97))
print(chr(1105))
print(chr(128519))

# ‚óè –§—É–Ω–∫—Ü–∏—è ord()
# ord(char)
# –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–¥–∏–Ω —Å–∏–º–≤–æ–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ –∫–æ–¥ –≤ —Ç–∞–±–ª–∏—Ü–µ –Æ–Ω–∏–∫–æ–¥.
print(ord('a'))
print(ord('–∞'))
print(ord('üòâ'))

data = [25, -42, 146, 73, -100, 12]
print(list(map(str, data)))
print(max(data, key=lambda x: -x))
print(*filter(lambda x: not x[0].startswith('__'), globals().items()))
