# Пользователь вводит строку из четырёх
# или более целых чисел, разделённых символом “/”.
# Сформируйте словарь, где:
# ✔второе и третье число являются ключами.
# ✔первое число является значением для первого ключа.
# ✔четвертое и все возможные последующие числа
#  хранятся в кортеже как значения второго ключа
import typing

q = '1/5/8/9/0/37/6'
a, b, c, *d = q.split('/')
print({b: a, c: tuple(d)})

# ✔ Самостоятельно сохраните в переменной строку текста.
# ✔ Создайте из строки словарь, где ключ — буква, а значение — код буквы.
# ✔ Напишите преобразование в одну строку.

a = 'fhgffhghljhhfghdfsfdjtfh'
new_gen = {i: ord(i) for i in a}
print(new_gen)

# ✔ Продолжаем развивать задачу 2.
# ✔ Возьмите словарь, который вы получили.
# Сохраните его итераторатор.
# ✔ Далее выведите первые 5 пар ключ-значение,
# обращаясь к итератору, а не к словарю.

new_iter = iter(new_gen.items())
for i in range(5):
    print(next(new_iter))

#  ✔ Создайте генератор чётных чисел от нуля до 100.
# ✔ Из последовательности исключите
# числа, сумма цифр которых равна 8.
# ✔ Решение в одну строку.

gen_numb = [i for i in range(0, 101) if i % 2 == 0 and (i // 10 + i % 10 != 8)]
print(gen_numb)
gen_numb_1 = [i for i in range(0, 101, 2)
              if sum(map(int, list(str(i)))) != 8]
print(gen_numb_1)

# ✔ Напишите программу, которая выводит
# на экран числа от 1 до 100.
# ✔ При этом вместо чисел, кратных трем,
# программа должна выводить слово «Fizz»
# ✔ Вместо чисел, кратных пяти — слово «Buzz».
# ✔ Если число кратно и 3, и 5, то программа
# должна выводить слово «FizzBuzz».
# ✔ *Превратите решение в генераторное выражение.

for i in range(1, 101):
    if i % 3 and i % 5 == 0:
        print('FuzzBuzz')
    elif i % 3 == 0:
        print('Buzz')
    elif i % 5 == 0:
        print('Fuzz')
    else:
        print(i)

res = ['FuzzBuzz' if i % 3 and i % 5 == 0 else
       'Buzz' if i % 3 == 0 else
       'Fuzz' if i % 5 == 0 else i
       for i in range(1, 101)]
print(res)


# Создайте функцию-генератор.
# ✔ Функция генерирует N простых чисел,
# начиная с числа 2.
# ✔ Для проверки числа на простоту используйте
# правило: «число является простым, если делится
# нацело только на единицу и на себя».

def simple_n(num: int) -> bool:
    for i in range(2, num):
        if num % i == 0:
            return False
    return True


# n = 100
# for i in range(2, n):
#     if simple_n(i):
#         print(i)

def gen_n(n: int) -> typing.Generator:
    for i in range(2, n):
        if simple_n(i):
            yield i


print()
res = gen_n(100)
for i in range(5):
    print(next(res))

print()
for i in gen_n(100):
    print(i)




